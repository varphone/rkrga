/* automatically generated by rust-bindgen 0.65.1 */

pub type bo_t = bo;
pub type rga_rect_t = rga_rect;
pub type rga_nn_t = rga_nn;
pub type rga_dither_t = rga_dither;
pub type rga_info_t = rga_info;
pub type drm_rga_t = drm_rga;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct bo {
    pub fd: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub offset: usize,
    pub pitch: usize,
    pub handle: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_rect {
    pub xoffset: ::std::os::raw::c_int,
    pub yoffset: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub wstride: ::std::os::raw::c_int,
    pub hstride: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_nn {
    pub nn_flag: ::std::os::raw::c_int,
    pub scale_r: ::std::os::raw::c_int,
    pub scale_g: ::std::os::raw::c_int,
    pub scale_b: ::std::os::raw::c_int,
    pub offset_r: ::std::os::raw::c_int,
    pub offset_g: ::std::os::raw::c_int,
    pub offset_b: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_dither {
    pub enable: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub lut0_l: ::std::os::raw::c_int,
    pub lut0_h: ::std::os::raw::c_int,
    pub lut1_l: ::std::os::raw::c_int,
    pub lut1_h: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_mosaic_info {
    pub enable: u8,
    pub mode: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_pre_intr_info {
    pub enable: u8,
    pub read_intr_en: u8,
    pub write_intr_en: u8,
    pub read_hold_en: u8,
    pub read_threshold: u32,
    pub write_start: u32,
    pub write_step: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_osd_invert_factor {
    pub alpha_max: u8,
    pub alpha_min: u8,
    pub yg_max: u8,
    pub yg_min: u8,
    pub crb_max: u8,
    pub crb_min: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rga_color {
    pub un1: rga_color__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_color__bindgen_ty_1__bindgen_ty_1 {
    pub red: u8,
    pub green: u8,
    pub blue: u8,
    pub alpha: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rga_osd_bpp2 {
    pub ac_swap: u8,
    pub endian_swap: u8,
    pub color0: rga_color,
    pub color1: rga_color,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_osd_mode_ctrl {
    pub mode: u8,
    pub direction_mode: u8,
    pub width_mode: u8,
    pub block_fix_width: u16,
    pub block_num: u8,
    pub flags_index: u16,
    pub color_mode: u8,
    pub invert_flags_mode: u8,
    pub default_color_sel: u8,
    pub invert_enable: u8,
    pub invert_mode: u8,
    pub invert_thresh: u8,
    pub unfix_index: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rga_osd_info {
    pub enable: u8,
    pub mode_ctrl: rga_osd_mode_ctrl,
    pub cal_factor: rga_osd_invert_factor,
    pub bpp2_info: rga_osd_bpp2,
    pub un1: rga_osd_info__bindgen_ty_1,
    pub un2: rga_osd_info__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_osd_info__bindgen_ty_1__bindgen_ty_1 {
    pub last_flags1: u32,
    pub last_flags0: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_osd_info__bindgen_ty_2__bindgen_ty_1 {
    pub cur_flags1: u32,
    pub cur_flags0: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rga_info {
    pub fd: ::std::os::raw::c_int,
    pub virAddr: *mut ::std::os::raw::c_void,
    pub phyAddr: *mut ::std::os::raw::c_void,
    pub hnd: ::std::os::raw::c_uint,
    pub format: ::std::os::raw::c_int,
    pub rect: rga_rect_t,
    pub blend: ::std::os::raw::c_uint,
    pub bufferSize: ::std::os::raw::c_int,
    pub rotation: ::std::os::raw::c_int,
    pub color: ::std::os::raw::c_int,
    pub testLog: ::std::os::raw::c_int,
    pub mmuFlag: ::std::os::raw::c_int,
    pub colorkey_en: ::std::os::raw::c_int,
    pub colorkey_mode: ::std::os::raw::c_int,
    pub colorkey_max: ::std::os::raw::c_int,
    pub colorkey_min: ::std::os::raw::c_int,
    pub scale_mode: ::std::os::raw::c_int,
    pub color_space_mode: ::std::os::raw::c_int,
    pub sync_mode: ::std::os::raw::c_int,
    pub nn: rga_nn_t,
    pub dither: rga_dither_t,
    pub rop_code: ::std::os::raw::c_int,
    pub rd_mode: ::std::os::raw::c_int,
    pub is_10b_compact: ::std::os::raw::c_ushort,
    pub is_10b_endian: ::std::os::raw::c_ushort,
    pub in_fence_fd: ::std::os::raw::c_int,
    pub out_fence_fd: ::std::os::raw::c_int,
    pub core: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub enable: ::std::os::raw::c_ushort,
    pub handle: ::std::os::raw::c_int,
    pub mosaic_info: rga_mosaic_info,
    pub osd_info: rga_osd_info,
    pub pre_intr: rga_pre_intr_info,
    pub mpi_mode: ::std::os::raw::c_int,
    pub un1: rga_info__bindgen_ty_1,
    pub reserve: [::std::os::raw::c_char; 402usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct drm_rga {
    pub src: rga_rect_t,
    pub dst: rga_rect_t,
}
pub const RGA_BLIT_SYNC: u32 = 20503;
pub const RGA_BLIT_ASYNC: u32 = 20504;
pub const HAL_TRANSFORM_FLIP_H: u32 = 1;
pub const HAL_TRANSFORM_FLIP_V: u32 = 2;
pub const HAL_TRANSFORM_ROT_90: u32 = 4;
pub const HAL_TRANSFORM_ROT_180: u32 = 3;
pub const HAL_TRANSFORM_ROT_270: u32 = 7;
pub const HAL_TRANSFORM_FLIP_H_V: u32 = 8;
pub const RGA3_SCHEDULER_CORE0: _bindgen_ty_5 = _bindgen_ty_5::RGA3_SCHEDULER_CORE0;
pub const RGA3_SCHEDULER_CORE1: _bindgen_ty_5 = _bindgen_ty_5::RGA3_SCHEDULER_CORE1;
pub const RGA2_SCHEDULER_CORE0: _bindgen_ty_5 = _bindgen_ty_5::RGA2_SCHEDULER_CORE0;
#[test]
fn bindgen_test_layout_bo() {
    const UNINIT: ::std::mem::MaybeUninit<bo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bo>(),
        48usize,
        concat!("Size of: ", stringify!(bo))
    );
    assert_eq!(
        ::std::mem::align_of::<bo>(),
        8usize,
        concat!("Alignment of ", stringify!(bo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(ptr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(pitch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bo),
            "::",
            stringify!(handle)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_rect() {
    const UNINIT: ::std::mem::MaybeUninit<rga_rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_rect>(),
        32usize,
        concat!("Size of: ", stringify!(rga_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_rect>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xoffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(xoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yoffset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(yoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wstride) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(wstride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hstride) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(hstride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(size)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_nn() {
    const UNINIT: ::std::mem::MaybeUninit<rga_nn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_nn>(),
        28usize,
        concat!("Size of: ", stringify!(rga_nn))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_nn>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_nn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nn_flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(nn_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_r) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(scale_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_g) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(scale_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_b) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(scale_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_r) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(offset_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_g) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(offset_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_b) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(offset_b)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_dither() {
    const UNINIT: ::std::mem::MaybeUninit<rga_dither> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_dither>(),
        24usize,
        concat!("Size of: ", stringify!(rga_dither))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_dither>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_dither))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lut0_l) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut0_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lut0_h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut0_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lut1_l) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut1_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lut1_h) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut1_h)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_mosaic_info() {
    const UNINIT: ::std::mem::MaybeUninit<rga_mosaic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_mosaic_info>(),
        2usize,
        concat!("Size of: ", stringify!(rga_mosaic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_mosaic_info>(),
        1usize,
        concat!("Alignment of ", stringify!(rga_mosaic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_mosaic_info),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_mosaic_info),
            "::",
            stringify!(mode)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_pre_intr_info() {
    const UNINIT: ::std::mem::MaybeUninit<rga_pre_intr_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_pre_intr_info>(),
        16usize,
        concat!("Size of: ", stringify!(rga_pre_intr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_pre_intr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_pre_intr_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_pre_intr_info),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_intr_en) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_pre_intr_info),
            "::",
            stringify!(read_intr_en)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_intr_en) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_pre_intr_info),
            "::",
            stringify!(write_intr_en)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_hold_en) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_pre_intr_info),
            "::",
            stringify!(read_hold_en)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_threshold) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_pre_intr_info),
            "::",
            stringify!(read_threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_pre_intr_info),
            "::",
            stringify!(write_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_step) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_pre_intr_info),
            "::",
            stringify!(write_step)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_osd_invert_factor() {
    const UNINIT: ::std::mem::MaybeUninit<rga_osd_invert_factor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_osd_invert_factor>(),
        6usize,
        concat!("Size of: ", stringify!(rga_osd_invert_factor))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_osd_invert_factor>(),
        1usize,
        concat!("Alignment of ", stringify!(rga_osd_invert_factor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha_max) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_invert_factor),
            "::",
            stringify!(alpha_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha_min) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_invert_factor),
            "::",
            stringify!(alpha_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yg_max) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_invert_factor),
            "::",
            stringify!(yg_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yg_min) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_invert_factor),
            "::",
            stringify!(yg_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crb_max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_invert_factor),
            "::",
            stringify!(crb_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crb_min) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_invert_factor),
            "::",
            stringify!(crb_min)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_color__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rga_color__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_color__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(rga_color__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rga_color__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(rga_color__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).red) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_color__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).green) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_color__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blue) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_color__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_color__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alpha)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_color__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rga_color__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_color__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(rga_color__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_color__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_color__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_color__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_color() {
    assert_eq!(
        ::std::mem::size_of::<rga_color>(),
        4usize,
        concat!("Size of: ", stringify!(rga_color))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_color>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_color))
    );
}
#[test]
fn bindgen_test_layout_rga_osd_bpp2() {
    const UNINIT: ::std::mem::MaybeUninit<rga_osd_bpp2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_osd_bpp2>(),
        12usize,
        concat!("Size of: ", stringify!(rga_osd_bpp2))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_osd_bpp2>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_osd_bpp2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_swap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_bpp2),
            "::",
            stringify!(ac_swap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endian_swap) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_bpp2),
            "::",
            stringify!(endian_swap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_bpp2),
            "::",
            stringify!(color0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_bpp2),
            "::",
            stringify!(color1)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_osd_mode_ctrl() {
    const UNINIT: ::std::mem::MaybeUninit<rga_osd_mode_ctrl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_osd_mode_ctrl>(),
        18usize,
        concat!("Size of: ", stringify!(rga_osd_mode_ctrl))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_osd_mode_ctrl>(),
        2usize,
        concat!("Alignment of ", stringify!(rga_osd_mode_ctrl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction_mode) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(direction_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width_mode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(width_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_fix_width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(block_fix_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_num) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(block_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(flags_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_mode) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(color_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invert_flags_mode) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(invert_flags_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_color_sel) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(default_color_sel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invert_enable) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(invert_enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invert_mode) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(invert_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invert_thresh) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(invert_thresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unfix_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_mode_ctrl),
            "::",
            stringify!(unfix_index)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_osd_info__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rga_osd_info__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_osd_info__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(rga_osd_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rga_osd_info__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rga_osd_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_flags1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(last_flags1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_flags0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(last_flags0)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_osd_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rga_osd_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_osd_info__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rga_osd_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_osd_info__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_osd_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info__bindgen_ty_1),
            "::",
            stringify!(last_flags)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_osd_info__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rga_osd_info__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_osd_info__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(rga_osd_info__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rga_osd_info__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rga_osd_info__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_flags1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(cur_flags1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_flags0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(cur_flags0)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_osd_info__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<rga_osd_info__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_osd_info__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(rga_osd_info__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_osd_info__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_osd_info__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info__bindgen_ty_2),
            "::",
            stringify!(cur_flags)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_osd_info() {
    const UNINIT: ::std::mem::MaybeUninit<rga_osd_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_osd_info>(),
        56usize,
        concat!("Size of: ", stringify!(rga_osd_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_osd_info>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_osd_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode_ctrl) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info),
            "::",
            stringify!(mode_ctrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cal_factor) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info),
            "::",
            stringify!(cal_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bpp2_info) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_osd_info),
            "::",
            stringify!(bpp2_info)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rga_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_info__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(rga_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_info__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info__bindgen_ty_1),
            "::",
            stringify!(ctx_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).job_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info__bindgen_ty_1),
            "::",
            stringify!(job_handle)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_info() {
    const UNINIT: ::std::mem::MaybeUninit<rga_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_info>(),
        696usize,
        concat!("Size of: ", stringify!(rga_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_info>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(virAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phyAddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(phyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hnd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(hnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(blend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).testLog) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(testLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmuFlag) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(mmuFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorkey_en) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_en)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorkey_mode) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorkey_max) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorkey_min) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_mode) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(scale_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_space_mode) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(color_space_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync_mode) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(sync_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nn) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(nn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dither) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(dither)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rop_code) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rop_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rd_mode) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rd_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_10b_compact) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(is_10b_compact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_10b_endian) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(is_10b_endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_fence_fd) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(in_fence_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_fence_fd) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(out_fence_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(core)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mosaic_info) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(mosaic_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osd_info) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(osd_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pre_intr) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(pre_intr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpi_mode) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(mpi_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(reserve)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_rga() {
    const UNINIT: ::std::mem::MaybeUninit<drm_rga> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drm_rga>(),
        64usize,
        concat!("Size of: ", stringify!(drm_rga))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_rga>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_rga))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_rga),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_rga),
            "::",
            stringify!(dst)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _Rga_SURF_FORMAT {
    RK_FORMAT_RGBA_8888 = 0,
    RK_FORMAT_RGBX_8888 = 256,
    RK_FORMAT_RGB_888 = 512,
    RK_FORMAT_BGRA_8888 = 768,
    RK_FORMAT_RGB_565 = 1024,
    RK_FORMAT_RGBA_5551 = 1280,
    RK_FORMAT_RGBA_4444 = 1536,
    RK_FORMAT_BGR_888 = 1792,
    RK_FORMAT_YCbCr_422_SP = 2048,
    RK_FORMAT_YCbCr_422_P = 2304,
    RK_FORMAT_YCbCr_420_SP = 2560,
    RK_FORMAT_YCbCr_420_P = 2816,
    RK_FORMAT_YCrCb_422_SP = 3072,
    RK_FORMAT_YCrCb_422_P = 3328,
    RK_FORMAT_YCrCb_420_SP = 3584,
    RK_FORMAT_YCrCb_420_P = 3840,
    RK_FORMAT_BPP1 = 4096,
    RK_FORMAT_BPP2 = 4352,
    RK_FORMAT_BPP4 = 4608,
    RK_FORMAT_BPP8 = 4864,
    RK_FORMAT_Y4 = 5120,
    RK_FORMAT_YCbCr_400 = 5376,
    RK_FORMAT_BGRX_8888 = 5632,
    RK_FORMAT_YVYU_422 = 6144,
    RK_FORMAT_YVYU_420 = 6400,
    RK_FORMAT_VYUY_422 = 6656,
    RK_FORMAT_VYUY_420 = 6912,
    RK_FORMAT_YUYV_422 = 7168,
    RK_FORMAT_YUYV_420 = 7424,
    RK_FORMAT_UYVY_422 = 7680,
    RK_FORMAT_UYVY_420 = 7936,
    RK_FORMAT_YCbCr_420_SP_10B = 8192,
    RK_FORMAT_YCrCb_420_SP_10B = 8448,
    RK_FORMAT_YCbCr_422_SP_10B = 8704,
    RK_FORMAT_YCrCb_422_SP_10B = 8960,
    RK_FORMAT_YCbCr_422_10b_SP = 2228224,
    RK_FORMAT_YCrCb_422_10b_SP = 2293760,
    RK_FORMAT_BGR_565 = 9216,
    RK_FORMAT_BGRA_5551 = 9472,
    RK_FORMAT_BGRA_4444 = 9728,
    RK_FORMAT_ARGB_8888 = 10240,
    RK_FORMAT_XRGB_8888 = 10496,
    RK_FORMAT_ARGB_5551 = 10752,
    RK_FORMAT_ARGB_4444 = 11008,
    RK_FORMAT_ABGR_8888 = 11264,
    RK_FORMAT_XBGR_8888 = 11520,
    RK_FORMAT_ABGR_5551 = 11776,
    RK_FORMAT_ABGR_4444 = 12032,
    RK_FORMAT_RGBA2BPP = 12288,
    RK_FORMAT_UNKNOWN = 65536,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_5 {
    RGA3_SCHEDULER_CORE0 = 1,
    RGA3_SCHEDULER_CORE1 = 2,
    RGA2_SCHEDULER_CORE0 = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_rockchip_gem_mem_type {
    ROCKCHIP_BO_CONTIG = 1,
    ROCKCHIP_BO_CACHABLE = 2,
    ROCKCHIP_BO_WC = 4,
    ROCKCHIP_BO_SECURE = 8,
    ROCKCHIP_BO_MASK = 15,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rga_color__bindgen_ty_1 {
    pub un1: rga_color__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rga_osd_info__bindgen_ty_1 {
    pub un1: rga_osd_info__bindgen_ty_1__bindgen_ty_1,
    pub last_flags: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rga_osd_info__bindgen_ty_2 {
    pub un1: rga_osd_info__bindgen_ty_2__bindgen_ty_1,
    pub cur_flags: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rga_info__bindgen_ty_1 {
    pub ctx_id: ::std::os::raw::c_int,
    pub job_handle: ::std::os::raw::c_int,
}
impl Default for bo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_color__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_color {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_osd_bpp2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_osd_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_osd_info__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_osd_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::_Rga_SURF_FORMAT as RgaSURF_FORMAT;
extern "C" {
    pub fn c_RkRgaInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaDeInit();
}
extern "C" {
    pub fn c_RkRgaGetContext(ctx: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn c_RkRgaBlit(
        src: *mut rga_info_t,
        dst: *mut rga_info_t,
        src1: *mut rga_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaColorFill(dst: *mut rga_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaFlush() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetAllocBuffer(
        bo_info: *mut bo_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        bpp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetAllocBufferCache(
        bo_info: *mut bo_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        bpp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetMmap(bo_info: *mut bo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaUnmap(bo_info: *mut bo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaFree(bo_info: *mut bo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetBufferFd(
        bo_info: *mut bo_t,
        fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}

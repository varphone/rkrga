/* automatically generated by rust-bindgen 0.64.0 */

pub type bo_t = bo;
pub type rga_rect_t = rga_rect;
pub type rga_nn_t = rga_nn;
pub type rga_dither_t = rga_dither;
pub type rga_info_t = rga_info;
pub type drm_rga_t = drm_rga;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct bo {
    pub fd: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub offset: usize,
    pub pitch: usize,
    pub handle: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_rect {
    pub xoffset: ::std::os::raw::c_int,
    pub yoffset: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub wstride: ::std::os::raw::c_int,
    pub hstride: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_nn {
    pub nn_flag: ::std::os::raw::c_int,
    pub scale_r: ::std::os::raw::c_int,
    pub scale_g: ::std::os::raw::c_int,
    pub scale_b: ::std::os::raw::c_int,
    pub offset_r: ::std::os::raw::c_int,
    pub offset_g: ::std::os::raw::c_int,
    pub offset_b: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_dither {
    pub enable: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub lut0_l: ::std::os::raw::c_int,
    pub lut0_h: ::std::os::raw::c_int,
    pub lut1_l: ::std::os::raw::c_int,
    pub lut1_h: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct rga_info {
    pub fd: ::std::os::raw::c_int,
    pub virAddr: *mut ::std::os::raw::c_void,
    pub phyAddr: *mut ::std::os::raw::c_void,
    pub hnd: ::std::os::raw::c_uint,
    pub format: ::std::os::raw::c_int,
    pub rect: rga_rect_t,
    pub blend: ::std::os::raw::c_uint,
    pub bufferSize: ::std::os::raw::c_int,
    pub rotation: ::std::os::raw::c_int,
    pub color: ::std::os::raw::c_int,
    pub testLog: ::std::os::raw::c_int,
    pub mmuFlag: ::std::os::raw::c_int,
    pub colorkey_en: ::std::os::raw::c_int,
    pub colorkey_mode: ::std::os::raw::c_int,
    pub colorkey_max: ::std::os::raw::c_int,
    pub colorkey_min: ::std::os::raw::c_int,
    pub scale_mode: ::std::os::raw::c_int,
    pub color_space_mode: ::std::os::raw::c_int,
    pub sync_mode: ::std::os::raw::c_int,
    pub nn: rga_nn_t,
    pub dither: rga_dither_t,
    pub rop_code: ::std::os::raw::c_int,
    pub rd_mode: ::std::os::raw::c_int,
    pub is_10b_compact: ::std::os::raw::c_ushort,
    pub is_10b_endian: ::std::os::raw::c_ushort,
    pub in_fence_fd: ::std::os::raw::c_int,
    pub out_fence_fd: ::std::os::raw::c_int,
    pub core: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub enable: ::std::os::raw::c_ushort,
    pub reserve: [::std::os::raw::c_int; 126usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct drm_rga {
    pub src: rga_rect_t,
    pub dst: rga_rect_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_img_info_t {
    pub yrgb_addr: u64,
    pub uv_addr: u64,
    pub v_addr: u64,
    pub format: u32,
    pub act_w: u16,
    pub act_h: u16,
    pub x_offset: u16,
    pub y_offset: u16,
    pub vir_w: u16,
    pub vir_h: u16,
    pub endian_mode: u16,
    pub alpha_swap: u16,
    pub rotate_mode: u16,
    pub rd_mode: u16,
    pub is_10b_compact: u16,
    pub is_10b_endian: u16,
    pub enable: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct POINT {
    pub x: u16,
    pub y: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct RECT {
    pub xmin: u16,
    pub xmax: u16,
    pub ymin: u16,
    pub ymax: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct MMU {
    pub mmu_en: u8,
    pub base_addr: u64,
    pub mmu_flag: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct COLOR_FILL {
    pub gr_x_a: i16,
    pub gr_y_a: i16,
    pub gr_x_b: i16,
    pub gr_y_b: i16,
    pub gr_x_g: i16,
    pub gr_y_g: i16,
    pub gr_x_r: i16,
    pub gr_y_r: i16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct FADING {
    pub b: u8,
    pub g: u8,
    pub r: u8,
    pub res: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct line_draw_t {
    pub start_point: POINT,
    pub end_point: POINT,
    pub color: u32,
    pub flag: u32,
    pub line_width: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct csc_coe_t {
    pub r_v: i16,
    pub g_y: i16,
    pub b_u: i16,
    pub off: i32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct full_csc_t {
    pub flag: u8,
    pub coe_y: csc_coe_t,
    pub coe_u: csc_coe_t,
    pub coe_v: csc_coe_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct rga_req {
    pub render_mode: u8,
    pub src: rga_img_info_t,
    pub dst: rga_img_info_t,
    pub pat: rga_img_info_t,
    pub rop_mask_addr: u64,
    pub LUT_addr: u64,
    pub clip: RECT,
    pub sina: i32,
    pub cosa: i32,
    pub alpha_rop_flag: u16,
    pub scale_mode: u8,
    pub color_key_max: u32,
    pub color_key_min: u32,
    pub fg_color: u32,
    pub bg_color: u32,
    pub gr_color: COLOR_FILL,
    pub line_draw_info: line_draw_t,
    pub fading: FADING,
    pub PD_mode: u8,
    pub alpha_global_value: u8,
    pub rop_code: u16,
    pub bsfilter_flag: u8,
    pub palette_mode: u8,
    pub yuv2rgb_mode: u8,
    pub endian_mode: u8,
    pub rotate_mode: u8,
    pub color_fill_mode: u8,
    pub mmu_info: MMU,
    pub alpha_rop_mode: u8,
    pub src_trans_mode: u8,
    pub dither_mode: u8,
    pub full_csc: full_csc_t,
    pub in_fence_fd: i32,
    pub core: u8,
    pub priority: u8,
    pub out_fence_fd: i32,
    pub reservr: [u8; 128usize],
}
pub const HAL_TRANSFORM_FLIP_H: u32 = 1;
pub const HAL_TRANSFORM_FLIP_V: u32 = 2;
pub const HAL_TRANSFORM_ROT_90: u32 = 4;
pub const HAL_TRANSFORM_ROT_180: u32 = 3;
pub const HAL_TRANSFORM_ROT_270: u32 = 7;
pub const HAL_TRANSFORM_FLIP_H_V: u32 = 8;
pub const RGA_BLIT_SYNC: u32 = 20503;
pub const RGA_BLIT_ASYNC: u32 = 20504;
pub const RGA_FLUSH: u32 = 20505;
pub const RGA_GET_RESULT: u32 = 20506;
pub const RGA_GET_VERSION: u32 = 20507;
pub const RGA_REG_CTRL_LEN: u32 = 8;
pub const RGA_REG_CMD_LEN: u32 = 28;
pub const RGA_CMD_BUF_SIZE: u32 = 1792;
pub const RGA_SCHED_PRIORITY_DEFAULT: u32 = 0;
pub const RGA_SCHED_PRIORITY_MAX: u32 = 6;
#[test]
fn bindgen_test_layout_bo() {
    const UNINIT: ::std::mem::MaybeUninit<bo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bo>(),
        48usize,
        concat!("Size of: ", stringify!(bo))
    );
    assert_eq!(
        ::std::mem::align_of::<bo>(),
        8usize,
        concat!("Alignment of ", stringify!(bo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(ptr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(pitch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bo),
            "::",
            stringify!(handle)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_rect() {
    const UNINIT: ::std::mem::MaybeUninit<rga_rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_rect>(),
        32usize,
        concat!("Size of: ", stringify!(rga_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_rect>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xoffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(xoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yoffset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(yoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wstride) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(wstride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hstride) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(hstride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(size)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_nn() {
    const UNINIT: ::std::mem::MaybeUninit<rga_nn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_nn>(),
        28usize,
        concat!("Size of: ", stringify!(rga_nn))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_nn>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_nn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nn_flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(nn_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_r) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(scale_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_g) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(scale_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_b) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(scale_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_r) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(offset_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_g) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(offset_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_b) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(offset_b)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_dither() {
    const UNINIT: ::std::mem::MaybeUninit<rga_dither> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_dither>(),
        24usize,
        concat!("Size of: ", stringify!(rga_dither))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_dither>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_dither))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lut0_l) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut0_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lut0_h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut0_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lut1_l) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut1_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lut1_h) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut1_h)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_info() {
    const UNINIT: ::std::mem::MaybeUninit<rga_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_info>(),
        704usize,
        concat!("Size of: ", stringify!(rga_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_info>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(virAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phyAddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(phyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hnd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(hnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(blend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).testLog) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(testLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmuFlag) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(mmuFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorkey_en) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_en)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorkey_mode) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorkey_max) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorkey_min) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_mode) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(scale_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_space_mode) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(color_space_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync_mode) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(sync_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nn) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(nn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dither) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(dither)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rop_code) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rop_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rd_mode) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rd_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_10b_compact) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(is_10b_compact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_10b_endian) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(is_10b_endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_fence_fd) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(in_fence_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_fence_fd) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(out_fence_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(core)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(reserve)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_rga() {
    const UNINIT: ::std::mem::MaybeUninit<drm_rga> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drm_rga>(),
        64usize,
        concat!("Size of: ", stringify!(drm_rga))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_rga>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_rga))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_rga),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_rga),
            "::",
            stringify!(dst)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_img_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<rga_img_info_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_img_info_t>(),
        56usize,
        concat!("Size of: ", stringify!(rga_img_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_img_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_img_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yrgb_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(yrgb_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(uv_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(v_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_w) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(act_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_h) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(act_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(x_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_offset) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(y_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_w) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(vir_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_h) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(vir_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endian_mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(endian_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha_swap) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(alpha_swap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotate_mode) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(rotate_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rd_mode) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(rd_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_10b_compact) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(is_10b_compact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_10b_endian) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(is_10b_endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(enable)
        )
    );
}
#[test]
fn bindgen_test_layout_POINT() {
    const UNINIT: ::std::mem::MaybeUninit<POINT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<POINT>(),
        4usize,
        concat!("Size of: ", stringify!(POINT))
    );
    assert_eq!(
        ::std::mem::align_of::<POINT>(),
        2usize,
        concat!("Alignment of ", stringify!(POINT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(POINT), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(POINT), "::", stringify!(y))
    );
}
#[test]
fn bindgen_test_layout_RECT() {
    const UNINIT: ::std::mem::MaybeUninit<RECT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RECT>(),
        8usize,
        concat!("Size of: ", stringify!(RECT))
    );
    assert_eq!(
        ::std::mem::align_of::<RECT>(),
        2usize,
        concat!("Alignment of ", stringify!(RECT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xmin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RECT),
            "::",
            stringify!(xmin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xmax) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RECT),
            "::",
            stringify!(xmax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymin) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RECT),
            "::",
            stringify!(ymin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymax) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(RECT),
            "::",
            stringify!(ymax)
        )
    );
}
#[test]
fn bindgen_test_layout_MMU() {
    const UNINIT: ::std::mem::MaybeUninit<MMU> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MMU>(),
        24usize,
        concat!("Size of: ", stringify!(MMU))
    );
    assert_eq!(
        ::std::mem::align_of::<MMU>(),
        8usize,
        concat!("Alignment of ", stringify!(MMU))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmu_en) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MMU),
            "::",
            stringify!(mmu_en)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MMU),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmu_flag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MMU),
            "::",
            stringify!(mmu_flag)
        )
    );
}
#[test]
fn bindgen_test_layout_COLOR_FILL() {
    const UNINIT: ::std::mem::MaybeUninit<COLOR_FILL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<COLOR_FILL>(),
        16usize,
        concat!("Size of: ", stringify!(COLOR_FILL))
    );
    assert_eq!(
        ::std::mem::align_of::<COLOR_FILL>(),
        2usize,
        concat!("Alignment of ", stringify!(COLOR_FILL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_x_a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_x_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_y_a) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_y_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_x_b) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_x_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_y_b) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_y_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_x_g) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_x_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_y_g) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_y_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_x_r) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_x_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_y_r) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_y_r)
        )
    );
}
#[test]
fn bindgen_test_layout_FADING() {
    const UNINIT: ::std::mem::MaybeUninit<FADING> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FADING>(),
        4usize,
        concat!("Size of: ", stringify!(FADING))
    );
    assert_eq!(
        ::std::mem::align_of::<FADING>(),
        1usize,
        concat!("Alignment of ", stringify!(FADING))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(FADING), "::", stringify!(b))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(FADING), "::", stringify!(g))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(FADING), "::", stringify!(r))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(FADING),
            "::",
            stringify!(res)
        )
    );
}
#[test]
fn bindgen_test_layout_line_draw_t() {
    const UNINIT: ::std::mem::MaybeUninit<line_draw_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<line_draw_t>(),
        20usize,
        concat!("Size of: ", stringify!(line_draw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<line_draw_t>(),
        4usize,
        concat!("Alignment of ", stringify!(line_draw_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(start_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_point) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(end_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(line_width)
        )
    );
}
#[test]
fn bindgen_test_layout_csc_coe_t() {
    const UNINIT: ::std::mem::MaybeUninit<csc_coe_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<csc_coe_t>(),
        12usize,
        concat!("Size of: ", stringify!(csc_coe_t))
    );
    assert_eq!(
        ::std::mem::align_of::<csc_coe_t>(),
        4usize,
        concat!("Alignment of ", stringify!(csc_coe_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(csc_coe_t),
            "::",
            stringify!(r_v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(csc_coe_t),
            "::",
            stringify!(g_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(csc_coe_t),
            "::",
            stringify!(b_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(csc_coe_t),
            "::",
            stringify!(off)
        )
    );
}
#[test]
fn bindgen_test_layout_full_csc_t() {
    const UNINIT: ::std::mem::MaybeUninit<full_csc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<full_csc_t>(),
        40usize,
        concat!("Size of: ", stringify!(full_csc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<full_csc_t>(),
        4usize,
        concat!("Alignment of ", stringify!(full_csc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(full_csc_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coe_y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(full_csc_t),
            "::",
            stringify!(coe_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coe_u) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(full_csc_t),
            "::",
            stringify!(coe_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coe_v) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(full_csc_t),
            "::",
            stringify!(coe_v)
        )
    );
}
#[test]
fn bindgen_test_layout_rga_req() {
    const UNINIT: ::std::mem::MaybeUninit<rga_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rga_req>(),
        488usize,
        concat!("Size of: ", stringify!(rga_req))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_req>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(render_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pat) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(pat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rop_mask_addr) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(rop_mask_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LUT_addr) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(LUT_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(clip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sina) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(sina)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cosa) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(cosa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha_rop_flag) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(alpha_rop_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_mode) as usize - ptr as usize },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(scale_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_key_max) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(color_key_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_key_min) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(color_key_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_color) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(fg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_color) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(bg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_color) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(gr_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_draw_info) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(line_draw_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fading) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(fading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PD_mode) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(PD_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha_global_value) as usize - ptr as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(alpha_global_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rop_code) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(rop_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bsfilter_flag) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(bsfilter_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palette_mode) as usize - ptr as usize },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(palette_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yuv2rgb_mode) as usize - ptr as usize },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(yuv2rgb_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endian_mode) as usize - ptr as usize },
        275usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(endian_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotate_mode) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(rotate_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_fill_mode) as usize - ptr as usize },
        277usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(color_fill_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmu_info) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(mmu_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha_rop_mode) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(alpha_rop_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_trans_mode) as usize - ptr as usize },
        305usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(src_trans_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dither_mode) as usize - ptr as usize },
        306usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(dither_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_csc) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(full_csc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_fence_fd) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(in_fence_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(core)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        353usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_fence_fd) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(out_fence_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reservr) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(reservr)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_rockchip_gem_mem_type {
    ROCKCHIP_BO_CONTIG = 1,
    ROCKCHIP_BO_CACHABLE = 2,
    ROCKCHIP_BO_WC = 4,
    ROCKCHIP_BO_SECURE = 8,
    ROCKCHIP_BO_MASK = 15,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _Rga_SURF_FORMAT {
    RK_FORMAT_RGBA_8888 = 0,
    RK_FORMAT_RGBX_8888 = 256,
    RK_FORMAT_RGB_888 = 512,
    RK_FORMAT_BGRA_8888 = 768,
    RK_FORMAT_RGB_565 = 1024,
    RK_FORMAT_RGBA_5551 = 1280,
    RK_FORMAT_RGBA_4444 = 1536,
    RK_FORMAT_BGR_888 = 1792,
    RK_FORMAT_YCbCr_422_SP = 2048,
    RK_FORMAT_YCbCr_422_P = 2304,
    RK_FORMAT_YCbCr_420_SP = 2560,
    RK_FORMAT_YCbCr_420_P = 2816,
    RK_FORMAT_YCrCb_422_SP = 3072,
    RK_FORMAT_YCrCb_422_P = 3328,
    RK_FORMAT_YCrCb_420_SP = 3584,
    RK_FORMAT_YCrCb_420_P = 3840,
    RK_FORMAT_BPP1 = 4096,
    RK_FORMAT_BPP2 = 4352,
    RK_FORMAT_BPP4 = 4608,
    RK_FORMAT_BPP8 = 4864,
    RK_FORMAT_Y4 = 5120,
    RK_FORMAT_YCbCr_400 = 5376,
    RK_FORMAT_BGRX_8888 = 5632,
    RK_FORMAT_YVYU_422 = 6144,
    RK_FORMAT_YVYU_420 = 6400,
    RK_FORMAT_VYUY_422 = 6656,
    RK_FORMAT_VYUY_420 = 6912,
    RK_FORMAT_YUYV_422 = 7168,
    RK_FORMAT_YUYV_420 = 7424,
    RK_FORMAT_UYVY_422 = 7680,
    RK_FORMAT_UYVY_420 = 7936,
    RK_FORMAT_YCbCr_420_SP_10B = 8192,
    RK_FORMAT_YCrCb_420_SP_10B = 8448,
    RK_FORMAT_YCbCr_422_10b_SP = 8704,
    RK_FORMAT_YCrCb_422_10b_SP = 8960,
    RK_FORMAT_BGR_565 = 9216,
    RK_FORMAT_BGRA_5551 = 9472,
    RK_FORMAT_BGRA_4444 = 9728,
    RK_FORMAT_ARGB_8888 = 10240,
    RK_FORMAT_XRGB_8888 = 10496,
    RK_FORMAT_ARGB_5551 = 10752,
    RK_FORMAT_ARGB_4444 = 11008,
    RK_FORMAT_ABGR_8888 = 11264,
    RK_FORMAT_XBGR_8888 = 11520,
    RK_FORMAT_ABGR_5551 = 11776,
    RK_FORMAT_ABGR_4444 = 12032,
    RK_FORMAT_UNKNOWN = 65536,
}
impl Default for bo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rga_req {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::_Rga_SURF_FORMAT as RgaSURF_FORMAT;
extern "C" {
    pub fn c_RkRgaInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaDeInit();
}
extern "C" {
    pub fn c_RkRgaGetContext(ctx: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn c_RkRgaBlit(
        src: *mut rga_info_t,
        dst: *mut rga_info_t,
        src1: *mut rga_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaColorFill(dst: *mut rga_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaFlush() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetAllocBuffer(
        bo_info: *mut bo_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        bpp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetAllocBufferCache(
        bo_info: *mut bo_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        bpp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetMmap(bo_info: *mut bo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaUnmap(bo_info: *mut bo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaFree(bo_info: *mut bo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetBufferFd(
        bo_info: *mut bo_t,
        fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}

/* automatically generated by rust-bindgen 0.59.2 */

pub const HAL_TRANSFORM_FLIP_H: u32 = 1;
pub const HAL_TRANSFORM_FLIP_V: u32 = 2;
pub const HAL_TRANSFORM_ROT_90: u32 = 4;
pub const HAL_TRANSFORM_ROT_180: u32 = 3;
pub const HAL_TRANSFORM_ROT_270: u32 = 7;
pub const HAL_TRANSFORM_FLIP_H_V: u32 = 8;
pub const RGA_BLIT_SYNC: u32 = 20503;
pub const RGA_BLIT_ASYNC: u32 = 20504;
pub const RGA_FLUSH: u32 = 20505;
pub const RGA_GET_RESULT: u32 = 20506;
pub const RGA_GET_VERSION: u32 = 20507;
pub const RGA_REG_CTRL_LEN: u32 = 8;
pub const RGA_REG_CMD_LEN: u32 = 28;
pub const RGA_CMD_BUF_SIZE: u32 = 1792;
pub type __int16_t = ::std::os::raw::c_short;
pub type __int32_t = ::std::os::raw::c_int;
pub type size_t = ::std::os::raw::c_ulong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum drm_rockchip_gem_mem_type {
    ROCKCHIP_BO_CONTIG = 1,
    ROCKCHIP_BO_CACHABLE = 2,
    ROCKCHIP_BO_WC = 4,
    ROCKCHIP_BO_SECURE = 8,
    ROCKCHIP_BO_MASK = 15,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct bo {
    pub fd: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
    pub size: size_t,
    pub offset: size_t,
    pub pitch: size_t,
    pub handle: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_bo() {
    assert_eq!(
        ::std::mem::size_of::<bo>(),
        48usize,
        concat!("Size of: ", stringify!(bo))
    );
    assert_eq!(
        ::std::mem::align_of::<bo>(),
        8usize,
        concat!("Alignment of ", stringify!(bo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bo>())).fd as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bo>())).ptr as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(ptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bo>())).size as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bo>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bo>())).pitch as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(bo), "::", stringify!(pitch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bo>())).handle as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bo),
            "::",
            stringify!(handle)
        )
    );
}
impl Default for bo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type bo_t = bo;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_rect {
    pub xoffset: ::std::os::raw::c_int,
    pub yoffset: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub wstride: ::std::os::raw::c_int,
    pub hstride: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rga_rect() {
    assert_eq!(
        ::std::mem::size_of::<rga_rect>(),
        32usize,
        concat!("Size of: ", stringify!(rga_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_rect>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_rect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_rect>())).xoffset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(xoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_rect>())).yoffset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(yoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_rect>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_rect>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_rect>())).wstride as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(wstride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_rect>())).hstride as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(hstride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_rect>())).format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_rect>())).size as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_rect),
            "::",
            stringify!(size)
        )
    );
}
pub type rga_rect_t = rga_rect;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_nn {
    pub nn_flag: ::std::os::raw::c_int,
    pub scale_r: ::std::os::raw::c_int,
    pub scale_g: ::std::os::raw::c_int,
    pub scale_b: ::std::os::raw::c_int,
    pub offset_r: ::std::os::raw::c_int,
    pub offset_g: ::std::os::raw::c_int,
    pub offset_b: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rga_nn() {
    assert_eq!(
        ::std::mem::size_of::<rga_nn>(),
        28usize,
        concat!("Size of: ", stringify!(rga_nn))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_nn>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_nn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_nn>())).nn_flag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(nn_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_nn>())).scale_r as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(scale_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_nn>())).scale_g as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(scale_g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_nn>())).scale_b as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(scale_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_nn>())).offset_r as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(offset_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_nn>())).offset_g as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(offset_g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_nn>())).offset_b as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_nn),
            "::",
            stringify!(offset_b)
        )
    );
}
pub type rga_nn_t = rga_nn;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_dither {
    pub enable: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub lut0_l: ::std::os::raw::c_int,
    pub lut0_h: ::std::os::raw::c_int,
    pub lut1_l: ::std::os::raw::c_int,
    pub lut1_h: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rga_dither() {
    assert_eq!(
        ::std::mem::size_of::<rga_dither>(),
        24usize,
        concat!("Size of: ", stringify!(rga_dither))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_dither>(),
        4usize,
        concat!("Alignment of ", stringify!(rga_dither))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_dither>())).enable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_dither>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_dither>())).lut0_l as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut0_l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_dither>())).lut0_h as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut0_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_dither>())).lut1_l as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut1_l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_dither>())).lut1_h as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_dither),
            "::",
            stringify!(lut1_h)
        )
    );
}
pub type rga_dither_t = rga_dither;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct rga_info {
    pub fd: ::std::os::raw::c_int,
    pub virAddr: *mut ::std::os::raw::c_void,
    pub phyAddr: *mut ::std::os::raw::c_void,
    pub hnd: ::std::os::raw::c_uint,
    pub format: ::std::os::raw::c_int,
    pub rect: rga_rect_t,
    pub blend: ::std::os::raw::c_uint,
    pub bufferSize: ::std::os::raw::c_int,
    pub rotation: ::std::os::raw::c_int,
    pub color: ::std::os::raw::c_int,
    pub testLog: ::std::os::raw::c_int,
    pub mmuFlag: ::std::os::raw::c_int,
    pub colorkey_en: ::std::os::raw::c_int,
    pub colorkey_mode: ::std::os::raw::c_int,
    pub colorkey_max: ::std::os::raw::c_int,
    pub colorkey_min: ::std::os::raw::c_int,
    pub scale_mode: ::std::os::raw::c_int,
    pub color_space_mode: ::std::os::raw::c_int,
    pub sync_mode: ::std::os::raw::c_int,
    pub nn: rga_nn_t,
    pub dither: rga_dither_t,
    pub rop_code: ::std::os::raw::c_int,
    pub reserve: [::std::os::raw::c_int; 127usize],
}
#[test]
fn bindgen_test_layout_rga_info() {
    assert_eq!(
        ::std::mem::size_of::<rga_info>(),
        680usize,
        concat!("Size of: ", stringify!(rga_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_info>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).virAddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(virAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).phyAddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(phyAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).hnd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(hnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).format as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).rect as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).blend as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(blend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).bufferSize as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).rotation as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).color as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).testLog as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(testLog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).mmuFlag as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(mmuFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).colorkey_en as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_en)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).colorkey_mode as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).colorkey_max as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).colorkey_min as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(colorkey_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).scale_mode as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(scale_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).color_space_mode as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(color_space_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).sync_mode as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(sync_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).nn as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(nn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).dither as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(dither)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).rop_code as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(rop_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_info>())).reserve as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_info),
            "::",
            stringify!(reserve)
        )
    );
}
impl Default for rga_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rga_info_t = rga_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct drm_rga {
    pub src: rga_rect_t,
    pub dst: rga_rect_t,
}
#[test]
fn bindgen_test_layout_drm_rga() {
    assert_eq!(
        ::std::mem::size_of::<drm_rga>(),
        64usize,
        concat!("Size of: ", stringify!(drm_rga))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_rga>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_rga))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_rga>())).src as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_rga),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_rga>())).dst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_rga),
            "::",
            stringify!(dst)
        )
    );
}
pub type drm_rga_t = drm_rga;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _Rga_SURF_FORMAT {
    RK_FORMAT_RGBA_8888 = 0,
    RK_FORMAT_RGBX_8888 = 256,
    RK_FORMAT_RGB_888 = 512,
    RK_FORMAT_BGRA_8888 = 768,
    RK_FORMAT_RGB_565 = 1024,
    RK_FORMAT_RGBA_5551 = 1280,
    RK_FORMAT_RGBA_4444 = 1536,
    RK_FORMAT_BGR_888 = 1792,
    RK_FORMAT_YCbCr_422_SP = 2048,
    RK_FORMAT_YCbCr_422_P = 2304,
    RK_FORMAT_YCbCr_420_SP = 2560,
    RK_FORMAT_YCbCr_420_P = 2816,
    RK_FORMAT_YCrCb_422_SP = 3072,
    RK_FORMAT_YCrCb_422_P = 3328,
    RK_FORMAT_YCrCb_420_SP = 3584,
    RK_FORMAT_YCrCb_420_P = 3840,
    RK_FORMAT_BPP1 = 4096,
    RK_FORMAT_BPP2 = 4352,
    RK_FORMAT_BPP4 = 4608,
    RK_FORMAT_BPP8 = 4864,
    RK_FORMAT_Y4 = 5120,
    RK_FORMAT_YCbCr_400 = 5376,
    RK_FORMAT_BGRX_8888 = 5632,
    RK_FORMAT_YVYU_422 = 6144,
    RK_FORMAT_YVYU_420 = 6400,
    RK_FORMAT_VYUY_422 = 6656,
    RK_FORMAT_VYUY_420 = 6912,
    RK_FORMAT_YUYV_422 = 7168,
    RK_FORMAT_YUYV_420 = 7424,
    RK_FORMAT_UYVY_422 = 7680,
    RK_FORMAT_UYVY_420 = 7936,
    RK_FORMAT_YCbCr_420_SP_10B = 8192,
    RK_FORMAT_YCrCb_420_SP_10B = 8448,
    RK_FORMAT_YCbCr_422_10b_SP = 8704,
    RK_FORMAT_YCrCb_422_10b_SP = 8960,
    RK_FORMAT_BGR_565 = 9216,
    RK_FORMAT_BGRA_5551 = 9472,
    RK_FORMAT_BGRA_4444 = 9728,
    RK_FORMAT_UNKNOWN = 65536,
}
pub use self::_Rga_SURF_FORMAT as RgaSURF_FORMAT;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_img_info_t {
    pub yrgb_addr: ::std::os::raw::c_ulong,
    pub uv_addr: ::std::os::raw::c_ulong,
    pub v_addr: ::std::os::raw::c_ulong,
    pub format: ::std::os::raw::c_uint,
    pub act_w: ::std::os::raw::c_ushort,
    pub act_h: ::std::os::raw::c_ushort,
    pub x_offset: ::std::os::raw::c_ushort,
    pub y_offset: ::std::os::raw::c_ushort,
    pub vir_w: ::std::os::raw::c_ushort,
    pub vir_h: ::std::os::raw::c_ushort,
    pub endian_mode: ::std::os::raw::c_ushort,
    pub alpha_swap: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_rga_img_info_t() {
    assert_eq!(
        ::std::mem::size_of::<rga_img_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(rga_img_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_img_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_img_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).yrgb_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(yrgb_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).uv_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(uv_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).v_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(v_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).act_w as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(act_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).act_h as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(act_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).x_offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(x_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).y_offset as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(y_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).vir_w as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(vir_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).vir_h as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(vir_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).endian_mode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(endian_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_img_info_t>())).alpha_swap as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_img_info_t),
            "::",
            stringify!(alpha_swap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct POINT {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_POINT() {
    assert_eq!(
        ::std::mem::size_of::<POINT>(),
        4usize,
        concat!("Size of: ", stringify!(POINT))
    );
    assert_eq!(
        ::std::mem::align_of::<POINT>(),
        2usize,
        concat!("Alignment of ", stringify!(POINT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<POINT>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(POINT), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<POINT>())).y as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(POINT), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct RECT {
    pub xmin: ::std::os::raw::c_ushort,
    pub xmax: ::std::os::raw::c_ushort,
    pub ymin: ::std::os::raw::c_ushort,
    pub ymax: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_RECT() {
    assert_eq!(
        ::std::mem::size_of::<RECT>(),
        8usize,
        concat!("Size of: ", stringify!(RECT))
    );
    assert_eq!(
        ::std::mem::align_of::<RECT>(),
        2usize,
        concat!("Alignment of ", stringify!(RECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECT>())).xmin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RECT),
            "::",
            stringify!(xmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECT>())).xmax as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RECT),
            "::",
            stringify!(xmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECT>())).ymin as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RECT),
            "::",
            stringify!(ymin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RECT>())).ymax as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(RECT),
            "::",
            stringify!(ymax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct MMU {
    pub mmu_en: ::std::os::raw::c_uchar,
    pub base_addr: ::std::os::raw::c_ulong,
    pub mmu_flag: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_MMU() {
    assert_eq!(
        ::std::mem::size_of::<MMU>(),
        24usize,
        concat!("Size of: ", stringify!(MMU))
    );
    assert_eq!(
        ::std::mem::align_of::<MMU>(),
        8usize,
        concat!("Alignment of ", stringify!(MMU))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MMU>())).mmu_en as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MMU),
            "::",
            stringify!(mmu_en)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MMU>())).base_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MMU),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MMU>())).mmu_flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MMU),
            "::",
            stringify!(mmu_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct COLOR_FILL {
    pub gr_x_a: ::std::os::raw::c_short,
    pub gr_y_a: ::std::os::raw::c_short,
    pub gr_x_b: ::std::os::raw::c_short,
    pub gr_y_b: ::std::os::raw::c_short,
    pub gr_x_g: ::std::os::raw::c_short,
    pub gr_y_g: ::std::os::raw::c_short,
    pub gr_x_r: ::std::os::raw::c_short,
    pub gr_y_r: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_COLOR_FILL() {
    assert_eq!(
        ::std::mem::size_of::<COLOR_FILL>(),
        16usize,
        concat!("Size of: ", stringify!(COLOR_FILL))
    );
    assert_eq!(
        ::std::mem::align_of::<COLOR_FILL>(),
        2usize,
        concat!("Alignment of ", stringify!(COLOR_FILL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COLOR_FILL>())).gr_x_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_x_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COLOR_FILL>())).gr_y_a as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_y_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COLOR_FILL>())).gr_x_b as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_x_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COLOR_FILL>())).gr_y_b as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_y_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COLOR_FILL>())).gr_x_g as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_x_g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COLOR_FILL>())).gr_y_g as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_y_g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COLOR_FILL>())).gr_x_r as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_x_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COLOR_FILL>())).gr_y_r as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(COLOR_FILL),
            "::",
            stringify!(gr_y_r)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct FADING {
    pub b: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub r: ::std::os::raw::c_uchar,
    pub res: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_FADING() {
    assert_eq!(
        ::std::mem::size_of::<FADING>(),
        4usize,
        concat!("Size of: ", stringify!(FADING))
    );
    assert_eq!(
        ::std::mem::align_of::<FADING>(),
        1usize,
        concat!("Alignment of ", stringify!(FADING))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FADING>())).b as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(FADING), "::", stringify!(b))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FADING>())).g as *const _ as usize },
        1usize,
        concat!("Offset of field: ", stringify!(FADING), "::", stringify!(g))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FADING>())).r as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(FADING), "::", stringify!(r))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FADING>())).res as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(FADING),
            "::",
            stringify!(res)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct line_draw_t {
    pub start_point: POINT,
    pub end_point: POINT,
    pub color: ::std::os::raw::c_uint,
    pub flag: ::std::os::raw::c_uint,
    pub line_width: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_line_draw_t() {
    assert_eq!(
        ::std::mem::size_of::<line_draw_t>(),
        20usize,
        concat!("Size of: ", stringify!(line_draw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<line_draw_t>(),
        4usize,
        concat!("Alignment of ", stringify!(line_draw_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<line_draw_t>())).start_point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(start_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<line_draw_t>())).end_point as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(end_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<line_draw_t>())).color as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<line_draw_t>())).flag as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<line_draw_t>())).line_width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(line_draw_t),
            "::",
            stringify!(line_width)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct csc_coe_t {
    pub r_v: i16,
    pub g_y: i16,
    pub b_u: i16,
    pub off: i32,
}
#[test]
fn bindgen_test_layout_csc_coe_t() {
    assert_eq!(
        ::std::mem::size_of::<csc_coe_t>(),
        12usize,
        concat!("Size of: ", stringify!(csc_coe_t))
    );
    assert_eq!(
        ::std::mem::align_of::<csc_coe_t>(),
        4usize,
        concat!("Alignment of ", stringify!(csc_coe_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<csc_coe_t>())).r_v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(csc_coe_t),
            "::",
            stringify!(r_v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<csc_coe_t>())).g_y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(csc_coe_t),
            "::",
            stringify!(g_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<csc_coe_t>())).b_u as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(csc_coe_t),
            "::",
            stringify!(b_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<csc_coe_t>())).off as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(csc_coe_t),
            "::",
            stringify!(off)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct full_csc_t {
    pub flag: ::std::os::raw::c_uchar,
    pub coe_y: csc_coe_t,
    pub coe_u: csc_coe_t,
    pub coe_v: csc_coe_t,
}
#[test]
fn bindgen_test_layout_full_csc_t() {
    assert_eq!(
        ::std::mem::size_of::<full_csc_t>(),
        40usize,
        concat!("Size of: ", stringify!(full_csc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<full_csc_t>(),
        4usize,
        concat!("Alignment of ", stringify!(full_csc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<full_csc_t>())).flag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(full_csc_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<full_csc_t>())).coe_y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(full_csc_t),
            "::",
            stringify!(coe_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<full_csc_t>())).coe_u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(full_csc_t),
            "::",
            stringify!(coe_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<full_csc_t>())).coe_v as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(full_csc_t),
            "::",
            stringify!(coe_v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct rga_req {
    pub render_mode: ::std::os::raw::c_uchar,
    pub src: rga_img_info_t,
    pub dst: rga_img_info_t,
    pub pat: rga_img_info_t,
    pub rop_mask_addr: ::std::os::raw::c_ulong,
    pub LUT_addr: ::std::os::raw::c_ulong,
    pub clip: RECT,
    pub sina: ::std::os::raw::c_int,
    pub cosa: ::std::os::raw::c_int,
    pub alpha_rop_flag: ::std::os::raw::c_ushort,
    pub scale_mode: ::std::os::raw::c_uchar,
    pub color_key_max: ::std::os::raw::c_uint,
    pub color_key_min: ::std::os::raw::c_uint,
    pub fg_color: ::std::os::raw::c_uint,
    pub bg_color: ::std::os::raw::c_uint,
    pub gr_color: COLOR_FILL,
    pub line_draw_info: line_draw_t,
    pub fading: FADING,
    pub PD_mode: ::std::os::raw::c_uchar,
    pub alpha_global_value: ::std::os::raw::c_uchar,
    pub rop_code: ::std::os::raw::c_ushort,
    pub bsfilter_flag: ::std::os::raw::c_uchar,
    pub palette_mode: ::std::os::raw::c_uchar,
    pub yuv2rgb_mode: ::std::os::raw::c_uchar,
    pub endian_mode: ::std::os::raw::c_uchar,
    pub rotate_mode: ::std::os::raw::c_uchar,
    pub color_fill_mode: ::std::os::raw::c_uchar,
    pub mmu_info: MMU,
    pub alpha_rop_mode: ::std::os::raw::c_uchar,
    pub src_trans_mode: ::std::os::raw::c_uchar,
    pub dither_mode: ::std::os::raw::c_uchar,
    pub full_csc: full_csc_t,
    pub CMD_fin_int_enable: ::std::os::raw::c_uchar,
    pub complete: ::std::option::Option<unsafe extern "C" fn(retval: ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout_rga_req() {
    assert_eq!(
        ::std::mem::size_of::<rga_req>(),
        336usize,
        concat!("Size of: ", stringify!(rga_req))
    );
    assert_eq!(
        ::std::mem::align_of::<rga_req>(),
        8usize,
        concat!("Alignment of ", stringify!(rga_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).render_mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(render_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).src as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).dst as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).pat as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(pat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).rop_mask_addr as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(rop_mask_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).LUT_addr as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(LUT_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).clip as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(clip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).sina as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(sina)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).cosa as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(cosa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).alpha_rop_flag as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(alpha_rop_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).scale_mode as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(scale_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).color_key_max as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(color_key_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).color_key_min as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(color_key_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).fg_color as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(fg_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).bg_color as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(bg_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).gr_color as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(gr_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).line_draw_info as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(line_draw_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).fading as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(fading)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).PD_mode as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(PD_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).alpha_global_value as *const _ as usize },
        245usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(alpha_global_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).rop_code as *const _ as usize },
        246usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(rop_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).bsfilter_flag as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(bsfilter_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).palette_mode as *const _ as usize },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(palette_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).yuv2rgb_mode as *const _ as usize },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(yuv2rgb_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).endian_mode as *const _ as usize },
        251usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(endian_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).rotate_mode as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(rotate_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).color_fill_mode as *const _ as usize },
        253usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(color_fill_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).mmu_info as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(mmu_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).alpha_rop_mode as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(alpha_rop_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).src_trans_mode as *const _ as usize },
        281usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(src_trans_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).dither_mode as *const _ as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(dither_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).full_csc as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(full_csc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).CMD_fin_int_enable as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(CMD_fin_int_enable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rga_req>())).complete as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rga_req),
            "::",
            stringify!(complete)
        )
    );
}
extern "C" {
    pub fn rga_set_fds_offsets(
        rga_request: *mut rga_req,
        src_fd: ::std::os::raw::c_ushort,
        dst_fd: ::std::os::raw::c_ushort,
        src_offset: ::std::os::raw::c_uint,
        dst_offset: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn c_RkRgaInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaDeInit();
}
extern "C" {
    pub fn c_RkRgaGetContext(ctx: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn c_RkRgaBlit(
        src: *mut rga_info_t,
        dst: *mut rga_info_t,
        src1: *mut rga_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaColorFill(dst: *mut rga_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaFlush() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetAllocBuffer(
        bo_info: *mut bo_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        bpp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetAllocBufferCache(
        bo_info: *mut bo_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        bpp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetMmap(bo_info: *mut bo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaUnmap(bo_info: *mut bo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaFree(bo_info: *mut bo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_RkRgaGetBufferFd(
        bo_info: *mut bo_t,
        fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
